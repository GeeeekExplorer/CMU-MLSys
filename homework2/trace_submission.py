from tvm import tir

def apply_trace(sch: tir.Schedule) -> None:
  # Paste your `apply_trace` function here...
  b0 = sch.get_block(name="gemm", func_name="main")
  l1, l2, l3 = sch.get_loops(block=b0)
  v4, v5 = sch.sample_perfect_tile(loop=l1, n=2, max_innermost_factor=16, decision=[128, 16])
  v6, v7 = sch.sample_perfect_tile(loop=l2, n=2, max_innermost_factor=16, decision=[128, 16])
  v8, v9 = sch.sample_perfect_tile(loop=l3, n=2, max_innermost_factor=16, decision=[128, 16])
  l10, l11 = sch.split(loop=l1, factors=[None, v5], preserve_unit_iters=True)
  l12, l13 = sch.split(loop=l2, factors=[None, v7], preserve_unit_iters=True)
  l14, l15 = sch.split(loop=l3, factors=[None, v9], preserve_unit_iters=True)
  sch.reorder(l10, l12, l14, l11, l13, l15)
  sch.bind(loop=l10, thread_axis="blockIdx.x")
  sch.bind(loop=l12, thread_axis="blockIdx.y")
  b16 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared")
  sch.compute_at(block=b16, loop=l14, preserve_unit_loops=True, index=-1)
  b17 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared")
  sch.compute_at(block=b17, loop=l14, preserve_unit_loops=True, index=-1)
  b18 = sch.get_block(name="gemm", func_name="main")
  l19, l20, l21, l22, l23, l24 = sch.get_loops(block=b18)
  v25, v26 = sch.sample_perfect_tile(loop=l22, n=2, max_innermost_factor=16, decision=[16, 1])
  v27, v28 = sch.sample_perfect_tile(loop=l23, n=2, max_innermost_factor=16, decision=[2, 8])
  v29, v30 = sch.sample_perfect_tile(loop=l24, n=2, max_innermost_factor=16, decision=[1, 16])
  l31, l32 = sch.split(loop=l22, factors=[None, v26], preserve_unit_iters=True)
  l33, l34 = sch.split(loop=l23, factors=[None, v28], preserve_unit_iters=True)
  l35, l36 = sch.split(loop=l24, factors=[None, v30], preserve_unit_iters=True)
  sch.reorder(l31, l33, l35, l32, l34, l36)
  sch.bind(loop=l31, thread_axis="threadIdx.x")
  sch.bind(loop=l33, thread_axis="threadIdx.y")
  b37 = sch.cache_read(block=b18, read_buffer_index=0, storage_scope="local")
  sch.compute_at(block=b37, loop=l35, preserve_unit_loops=True, index=-1)
  b38 = sch.cache_read(block=b18, read_buffer_index=1, storage_scope="local")
  sch.compute_at(block=b38, loop=l35, preserve_unit_loops=True, index=-1)
  l39, l40, l41, l42, l43 = sch.get_loops(block=b16)
  l44 = sch.fuse(l42, l43, preserve_unit_iters=True)
  l45, l46, l47 = sch.split(loop=l44, factors=[None, v25, v27], preserve_unit_iters=True)
  sch.bind(loop=l46, thread_axis="threadIdx.x")
  sch.bind(loop=l47, thread_axis="threadIdx.y")
  l48, l49, l50, l51, l52 = sch.get_loops(block=b17)
  l53 = sch.fuse(l51, l52, preserve_unit_iters=True)
  l54, l55, l56 = sch.split(loop=l53, factors=[None, v25, v27], preserve_unit_iters=True)
  sch.bind(loop=l55, thread_axis="threadIdx.x")
  sch.bind(loop=l56, thread_axis="threadIdx.y")
  b57 = sch.get_block(name="gemm", func_name="main")
  l58, l59, l60, l61, l62, l63, l64, l65, l66 = sch.get_loops(block=b57)
  b67 = sch.cache_write(block=b57, write_buffer_index=0, storage_scope="local")
  sch.reverse_compute_at(block=b67, loop=l62, preserve_unit_loops=True, index=-1)
  b68 = sch.get_block(name="relu", func_name="main")
  b69 = sch.get_block(name="add", func_name="main")
  sch.reverse_compute_inline(block=b68)
  sch.reverse_compute_inline(block=b69)
  sch.enter_postproc()
  b70 = sch.get_block(name="gemm", func_name="main")
  l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
  b80 = sch.decompose_reduction(block=b70, loop=l73)
